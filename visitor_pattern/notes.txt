1. Notes on the C++ part

   In this snippet, each ingredient sorting algorithm is
   implemented as an element in visitor pattern, which 
   provides an accept method; then an algorithms composite
   class holds element objects. By this arrangement, when a 
   visitor visits the composite class, it will visit all 
   ingredient elements contained inside accordingly. In
   the source code, accept_if class impersons the abstract
   element class.

   The abstract visitor class hosts visit methods for all applicable
   algorithm element classes and a set of of other methods for testing
   a sorting algorithms. Prior to a sorting run, the visitor will 
   shuffle the array; After a run, it will verify whehter the array 
   is properly ordered.
 
   The main functionality of a concrete visitor class
   is to provision an array of template-typed elements, aloing with
   the functor class for comparing elements.

   Two concreate visitors have been implmenetd, int_visitor and
   pair_visitor class respectively.

   int_visitor provisions an array of integers while pair_visitor
   provisions an array of paired numbers for sorting.

   There are in total six sorting algorithms implemented as follow:

     Insert Sort, Bubble Sort, Heap Sort, 
     Merge Sort, Quick Sort, Radix Sort
     (Radix Sort utilizes counting sort to sort on each radix)

   Dealing with template programming is the biggest challenge in this
   exercise.

2. Notes on the JAVA part

